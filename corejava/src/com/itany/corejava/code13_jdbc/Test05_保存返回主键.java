package com.itany.corejava.code13_jdbc;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

/**
 * @author 石小俊
 * @date 2023年09月13日 10:31
 */
public class Test05_保存返回主键 {

    public static void main(String[] args) throws DataAccessException {
        User user = new User("alice", "123456", "13812345678", "江苏-无锡");
        Integer id = insertReturnPrimaryKey(user);
        System.out.println("生成的主键值为:" + id);
    }


    public static Integer insertReturnPrimaryKey(User user) throws DataAccessException {
        Connection conn = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        Integer id = null;

        try {
            conn = JDBCUtil.getConnection();
            String sql = new StringBuffer()
                    .append(" insert into ")
                    .append(" t_user ")
                    .append("   (username,password,phone,address)")
                    .append(" values ")
                    .append("   (?,?,?,?)")
                    .toString();
            // 想要实现保存返回主键的功能
            // 在获取状态集的时候,需要设置获取的状态集能够获取保存时返回的主键
            // prepareStatement(String sql,int autoGeneratedKeys)
            // 该方法参数一表示sql语句
            // 参数二表示设置保存后是否返回主键,其值是由Statement提供的两个常量
            // RETURN_GENERATED_KEYS:该常量指示生成的键应该可用于获取
            // NO_GENERATED_KEYS:该常量指示生成的键应该不可用于获取
            // 如果想要获取主键,请使用RETURN_GENERATED_KEYS
            ps = conn.prepareStatement(sql, PreparedStatement.RETURN_GENERATED_KEYS);
            ps.setString(1, user.getUsername());
            ps.setString(2, user.getPassword());
            ps.setString(3, user.getPhone());
            ps.setString(4, user.getAddress());
            // 执行DML操作
            ps.executeUpdate();

            // 只有在数据库中成功添加之后,才会生成主键
            // 因此,获取返回的主键的方法必须在成功添加之后进行操作
            // 在Statement接口中提供了getGeneratedKeys方法
            // 该方法用于获取由于执行此 Statement 对象而创建的所有自动生成的键
            // 此时的方法返回值是一个结果集,需要对其进行映射
            // 此时字段名不是数据库列名,而是由数据库厂商定义的一个名字
            rs = ps.getGeneratedKeys();
            while (rs.next()) {
                // 由于结果集中生成的主键的列名是由数据库定义的
                // 对于开发者而言,数据库厂商为其定义的列名可能不知道
                // 但是我们能确定是此时返回的列有且仅有一列
                // 因此,此时可以通过索引号进行映射,直接将第一列的值映射为主键值
                id = rs.getInt(1);
            }
        } catch (DataAccessException e) {
            e.printStackTrace();
            throw e;
        } catch (SQLException e) {
            e.printStackTrace();
            throw new DataAccessException("数据访问异常");
        } finally {
            JDBCUtil.close(conn, ps, rs);
        }
        return id;
    }

}
